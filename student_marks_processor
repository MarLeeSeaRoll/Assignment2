#include <iostream>
#include <fstream>

using namespace std;

// Function to read data from file into arrays
int readDataFromFile(const string& filename, string ids[], string names[], double mathMarks[], double scienceMarks[], double englishMarks[], double totalMarks[], int maxSize) {
    ifstream file(filename.c_str());
    int count = 0;

    while (file >> ids[count] >> names[count] >> mathMarks[count] >> scienceMarks[count] >> englishMarks[count] && count < maxSize) {
        totalMarks[count] = mathMarks[count] + scienceMarks[count] + englishMarks[count];
        count++;
    }

    return count;
}

// Function to print details of a student matching a provided ID number
void printStudentDetails(string ids[], string names[], double mathMarks[], double scienceMarks[], double englishMarks[], double totalMarks[], int count, const string& id) {
    bool found = false;
    for (int i = 0; i < count; ++i) {
        if (ids[i] == id) {
            found = true;
            cout << "Student ID: " << ids[i] << endl;
            cout << "Student Name: " << names[i] << endl;
            cout << "Math Marks: " << mathMarks[i] << endl;
            cout << "Science Marks: " << scienceMarks[i] << endl;
            cout << "English Marks: " << englishMarks[i] << endl;
            cout << "Total Marks: " << totalMarks[i] << endl;
            break;
        }
    }
    if (!found) {
        cout << "Student with ID " << id << " not found." << endl;
    }
}

// Function to display the list of students with total marks
void displayListWithTotal(string ids[], string names[], double mathMarks[], double scienceMarks[], double englishMarks[], double totalMarks[], int count) {
    for (int i = 0; i < count; ++i) {
        cout << "Student ID: " << ids[i] << ", Name: " << names[i]
             << ", Math: " << mathMarks[i] << ", Science: " << scienceMarks[i]
             << ", English: " << englishMarks[i] << ", Total: " << totalMarks[i] << endl;
    }
}

// Function to print list of students sorted by total marks using bubble sort
void printSortedByTotal(string ids[], string names[], double mathMarks[], double scienceMarks[], double englishMarks[], double totalMarks[], int count) {
    // Bubble sort
    for (int i = 0; i < count - 1; ++i) {
        for (int j = 0; j < count - i - 1; ++j) {
            if (totalMarks[j] > totalMarks[j + 1]) {
                // Manually swap elements
                string tempId = ids[j];
                ids[j] = ids[j + 1];
                ids[j + 1] = tempId;

                string tempName = names[j];
                names[j] = names[j + 1];
                names[j + 1] = tempName;

                double tempMath = mathMarks[j];
                mathMarks[j] = mathMarks[j + 1];
                mathMarks[j + 1] = tempMath;

                double tempScience = scienceMarks[j];
                scienceMarks[j] = scienceMarks[j + 1];
                scienceMarks[j + 1] = tempScience;

                double tempEnglish = englishMarks[j];
                englishMarks[j] = englishMarks[j + 1];
                englishMarks[j + 1] = tempEnglish;

                double tempTotal = totalMarks[j];
                totalMarks[j] = totalMarks[j + 1];
                totalMarks[j + 1] = tempTotal;
            }
        }
    }

    // Display sorted list
    displayListWithTotal(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count);
}

// Function to write report to file
void writeReportToFile(string ids[], string names[], double mathMarks[], double scienceMarks[], double englishMarks[], double totalMarks[], int count) {
    ofstream outfile("summary.txt");
    for (int i = 0; i < count; ++i) {
        outfile << "Student ID: " << ids[i] << ", Name: " << names[i]
                << ", Math: " << mathMarks[i] << ", Science: " << scienceMarks[i]
                << ", English: " << englishMarks[i] << ", Total: " << totalMarks[i] << endl;
    }
    outfile.close();
    cout << "Report has been written to summary.txt\n";
}

int main() {
    const int maxSize = 300;
    string ids[maxSize];
    string names[maxSize];
    double mathMarks[maxSize];
    double scienceMarks[maxSize];
    double englishMarks[maxSize];
    double totalMarks[maxSize];
    int count = readDataFromFile("studentmarks.txt", ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, maxSize);
    char choice;

    do {
        cout << "\nMenu:\n";
        cout << "1) Print the entire list\n";
        cout << "2) Print details of student matching a provided ID number\n";
        cout << "3) Display entire list with total\n";
        cout << "4) Print list sorted by total\n";
        cout << "5) Write report to file\n";
        cout << "6) Exit program\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1':
                displayListWithTotal(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count);
                break;
            case '2': {
                string id;
                cout << "Enter student ID: ";
                cin >> id;
                printStudentDetails(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count, id);
                break;
            }
            case '3':
                displayListWithTotal(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count);
                break;
            case '4':
                printSortedByTotal(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count);
                break;
            case '5':
                writeReportToFile(ids, names, mathMarks, scienceMarks, englishMarks, totalMarks, count);
                break;
            case '6':
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice. Please enter again.\n";
        }
    } while (choice != '6');

    return 0;
}
